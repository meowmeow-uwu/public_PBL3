// DOM Elements
const topicGrid = document.querySelector('.topic-grid');
const flashcardSection = document.querySelector('.flashcard-section');
const flashcard = document.querySelector('.flashcard');
const wordElement = document.querySelector('.word');
const phoneticElement = document.querySelector('.phonetic');
const wordTypeElement = document.querySelector('.word-type');
const meaningEnElement = document.querySelector('.meaning-en');
const definitionElement = document.querySelector('.definition');
const exampleElement = document.querySelector('.example');
const meaningElement = document.querySelector('.meaning');
const meaningViElement = document.querySelector('.meaning-vi');
const definitionViElement = document.querySelector('.definition-vi');
const exampleViElement = document.querySelector('.example-vi');
const progressFill = document.querySelector('.progress-fill');
const progressText = document.querySelector('.progress-text');
const prevBtn = document.querySelector('.prev-btn');
const nextBtn = document.querySelector('.next-btn');
const audioBtn = document.querySelector('.audio-btn');
const markLearnedBtn = document.querySelector('.mark-learned-btn');
const currentNumberElement = document.querySelector('.current-number');
const totalNumberElement = document.querySelector('.total-number');
const collectionModal = document.getElementById('collectionModal');
const collectionList = document.querySelector('.collection-list');

// State variables
let currentCollection = null;
let currentWordIndex = 0;
let learnedWords = new Set();
let publicCollections = [];
let currentWords = [];
let currentWord = null;

// Initialize the interface
async function init() {
    try {
        // Ki·ªÉm tra c√°c element c·∫ßn thi·∫øt
        if (!topicGrid) {
            console.error('Kh√¥ng t√¨m th·∫•y element .topic-grid');
            return;
        }
        publicCollections = await window.collectionManagementAPI.getAllCollections(); 
        console.log('Danh s√°ch b·ªô s∆∞u t·∫≠p c√¥ng khai:', publicCollections);
        // L·∫•y danh s√°ch b·ªô s∆∞u t·∫≠p c√¥ng kha
        publicCollections.forEach(collection => {
            const card = createTopicCard(collection);
            topicGrid.appendChild(card);
        });

        // ·∫®n flashcard section ban ƒë·∫ßu
        if (flashcardSection) {
            flashcardSection.style.display = 'none';
        }

        // Th√™m event listeners n·∫øu c√°c element t·ªìn t·∫°i
        if (flashcard) {
            flashcard.addEventListener('click', flipCard);
        }
        if (prevBtn) {
            prevBtn.addEventListener('click', showPreviousWord);
        }
        if (nextBtn) {
            nextBtn.addEventListener('click', showNextWord);
        }
        if (audioBtn) {
            audioBtn.addEventListener('click', playAudio);
        }

        if (markLearnedBtn) {
            markLearnedBtn.addEventListener('click', toggleLearned);
        }

        // Th√™m event listener cho n√∫t t·∫°o b·ªô s∆∞u t·∫≠p m·ªõi
        const createCollectionBtn = document.getElementById('createCollectionBtn');
        if (createCollectionBtn) {
            createCollectionBtn.addEventListener('click', createNewCollection);
        }
    } catch (error) {
        console.error('L·ªói khi kh·ªüi t·∫°o:', error);
        if (topicGrid) {
            topicGrid.innerHTML = `
                <div class="error-message">
                    <div style="font-size: 2em; margin-bottom: 10px;">‚ö†Ô∏è</div>
                    <div>C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu</div>
                    <div style="margin-top: 10px; color: #666;">Vui l√≤ng th·ª≠ l·∫°i sau</div>
                </div>
            `;
        }
    }
}

// T·∫°o m√†u ng·∫´u nhi√™n
function getRandomColor() {
    const colors = [
        '#FF6B6B', // ƒê·ªè h·ªìng
        '#4ECDC4', // Xanh ng·ªçc
        '#45B7D1', // Xanh d∆∞∆°ng
        '#96CEB4', // Xanh l√° nh·∫°t
        '#FFEEAD', // V√†ng nh·∫°t
        '#D4A5A5', // H·ªìng nh·∫°t
        '#9B59B6', // T√≠m
        '#3498DB', // Xanh d∆∞∆°ng ƒë·∫≠m
        '#E67E22', // Cam
        '#2ECC71'  // Xanh l√° ƒë·∫≠m
    ];
    return colors[Math.floor(Math.random() * colors.length)];
}

// T·∫°o th·∫ª ch·ªß ƒë·ªÅ t·ª´ v·ª±ng
function createTopicCard(collection) {
    const card = document.createElement('div');
    card.className = 'topic-card';
    card.onclick = () => startCollection(collection);

    const randomColor = getRandomColor();

    card.innerHTML = `
        <div class="topic-icon" style="color: ${randomColor}">üìö</div>
        <h3>${collection.name}</h3>
        <div class="topic-info">
            <span>${collection.wordCount || 0} t·ª´</span>
        </div>
        <div class="topic-card-actions">
            <button class="save-collection-btn" onclick="event.stopPropagation(); saveCollection(${collection.collectionId})">
                <i class="fas fa-bookmark"></i> L∆∞u b·ªô s∆∞u t·∫≠p
            </button>
        </div>
    `;

    return card;
}

// B·∫Øt ƒë·∫ßu h·ªçc m·ªôt b·ªô s∆∞u t·∫≠p
async function startCollection(collection) {
    try {
        currentCollection = collection;
        currentWordIndex = 0;
        learnedWords.clear();
        updateProgress();

        // Hi·ªÉn th·ªã flashcard section
        if (topicGrid) {
            topicGrid.style.display = 'none';
        }
        if (flashcardSection) {
            flashcardSection.style.display = 'block';
        }

        // L·∫•y danh s√°ch t·ª´ trong b·ªô s∆∞u t·∫≠p
        currentWords = await window.collectionsAPI.getWordsInCollection(collection.collectionId);
        if (!currentWords || currentWords.length === 0) {
            showToast('warning', 'C·∫£nh b√°o', 'B·ªô s∆∞u t·∫≠p n√†y ch∆∞a c√≥ t·ª´ n√†o');
            return;
        }

        // Hi·ªÉn th·ªã t·ª´ ƒë·∫ßu ti√™n
        showCurrentWord(currentWords[0]);
    } catch (error) {
        console.error('L·ªói khi b·∫Øt ƒë·∫ßu h·ªçc:', error);
        showToast('error', 'L·ªói', 'C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu t·ª´ v·ª±ng');
    }
}

// Hi·ªÉn th·ªã t·ª´ hi·ªán t·∫°i
async function showCurrentWord(word) {
    try {
        currentWord = word; // L∆∞u t·ª´ hi·ªán t·∫°i
        // L·∫•y th√¥ng tin flashcard c·ªßa t·ª´
        const flashcardData = await window.wordAPI.getFlashcard(word.wordId);
        console.log('Flashcard data:', flashcardData); // Debug log

        // Hi·ªÉn th·ªã ·∫£nh n·∫øu c√≥
        const imageUrl = flashcardData.sourceWord?.image || '';
        const imageHtml = imageUrl ? `<img src="${imageUrl}" alt="${flashcardData.sourceWord?.word_name || ''}" class="flashcard-image">` : '';

        const imageViUrl = flashcardData.targetWord?.image || '';
        const imageViHtml = imageViUrl ? `<img src="${imageViUrl}" alt="${flashcardData.targetWord?.word_name || ''}" class="flashcard-image">` : '';

// C·∫≠p nh·∫≠t s·ªë th·ª© t·ª±
        if (currentNumberElement) {
            currentNumberElement.textContent = currentWordIndex + 1;
        }
        if (totalNumberElement) {
            totalNumberElement.textContent = currentWords.length;
        }

// C·∫≠p nh·∫≠t m·∫∑t tr∆∞·ªõc c·ªßa th·∫ª
        if (wordElement) {
            wordElement.textContent = flashcardData.sourceWord?.word_name || '';
        }
// Hi·ªÉn th·ªã ·∫£nh m·∫∑t tr∆∞·ªõc
        const imageElement = document.querySelector('.image');
        if (imageElement) {
            imageElement.innerHTML = imageHtml;
        }
        if (phoneticElement) {
            phoneticElement.textContent = flashcardData.sourceWord?.pronunciation || '';
        }
        if (wordTypeElement) {
            wordTypeElement.textContent = flashcardData.sourceDefinition?.definition || '';
        }
        if (meaningEnElement) {
            meaningEnElement.textContent = flashcardData.sourceDefinition?.meaning || '';
        }
        if (definitionElement) {
            definitionElement.textContent = flashcardData.sourceDefinition?.definition || '';
        }
        if (exampleElement) {
            exampleElement.textContent = flashcardData.sourceDefinition?.example || '';
        }

// C·∫≠p nh·∫≠t m·∫∑t sau c·ªßa th·∫ª
        if (meaningElement) {
            meaningElement.textContent = flashcardData.targetWord?.word_name || '';
        }
// Hi·ªÉn th·ªã ·∫£nh m·∫∑t sau
        const imageViElement = document.querySelector('.image-vi');
        if (imageViElement) {
            imageViElement.innerHTML = imageViHtml;
        }
        if (meaningViElement) {
            meaningViElement.textContent = flashcardData.targetDefinition?.meaning || '';
        }
        if (definitionViElement) {
            definitionViElement.textContent = flashcardData.targetDefinition?.definition || '';
        }
        if (exampleViElement) {
            exampleViElement.textContent = flashcardData.targetDefinition?.example || '';
        }

// Reset th·∫ª v·ªÅ m·∫∑t tr∆∞·ªõc
        if (flashcard) {
            flashcard.classList.remove('flipped');
        }

// C·∫≠p nh·∫≠t n√∫t ƒëi·ªÅu h∆∞·ªõng
        if (prevBtn) {
            prevBtn.disabled = currentWordIndex === 0;
        }
        if (nextBtn) {
            nextBtn.disabled = currentWordIndex === currentWords.length - 1;
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ h·ªçc
        updateLearnedStatus();
    } catch (error) {
        console.error('L·ªói khi hi·ªÉn th·ªã t·ª´:', error);
        showToast('error', 'L·ªói', 'C√≥ l·ªói x·∫£y ra khi t·∫£i th√¥ng tin t·ª´ v·ª±ng');
        showPreviousWord();
    }
}

// L·∫≠t th·∫ª
function flipCard() {
    if (flashcard) {
        flashcard.classList.toggle('flipped');
    }
}

// Hi·ªÉn th·ªã t·ª´ tr∆∞·ªõc
function showPreviousWord() {
    if (currentWordIndex > 0) {
        currentWordIndex--;
        showCurrentWord(currentWords[currentWordIndex]);
    }
}

// Hi·ªÉn th·ªã t·ª´ ti·∫øp theo
function showNextWord() {
    if (currentWordIndex < currentWords.length - 1) {
        currentWordIndex++;
        showCurrentWord(currentWords[currentWordIndex]);
    }
}

// Ph√°t √¢m
function playAudio() {
    const currentWord = currentWords[currentWordIndex];
    if (currentWord && currentWord.sound) {
        const audio = new Audio(`${currentWord.sound}`);
        audio.play().catch(error => {
            console.error('L·ªói khi ph√°t √¢m:', error);
        });
    }
}

// ƒê√°nh d·∫•u ƒë√£ h·ªçc
function toggleLearned() {
    const currentWord = currentWords[currentWordIndex];
    if (currentWord) {
        if (learnedWords.has(currentWord.wordId)) {
            learnedWords.delete(currentWord.wordId);
        } else {
            learnedWords.add(currentWord.wordId);
        }
        updateLearnedStatus();
        updateProgress();
    }
}

// C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ h·ªçc
function updateLearnedStatus() {
    const currentWord = currentWords[currentWordIndex];
    if (markLearnedBtn && currentWord) {
        const isLearned = learnedWords.has(currentWord.wordId);
        markLearnedBtn.innerHTML = `
            <i class="fas ${isLearned ? 'fa-check-circle' : 'fa-circle'}"></i>
            ${isLearned ? 'ƒê√£ h·ªçc' : 'ƒê√°nh d·∫•u ƒë√£ h·ªçc'}
        `;
    }
}

// C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô
function updateProgress() {
    if (progressFill && progressText && currentWords) {
        const totalWords = currentWords.length;
        const learnedCount = learnedWords.size;
        const progress = (learnedCount / totalWords) * 100;

        progressFill.style.width = `${progress}%`;
        progressText.textContent = `${learnedCount}/${totalWords} t·ª´ ƒë√£ h·ªçc`;
    }
}

// L∆∞u b·ªô s∆∞u t·∫≠p
async function saveCollection(collectionId) {
    try {
        await window.collectionsAPI.addUserToCollection(collectionId);
        showToast('success', 'Th√†nh c√¥ng!', 'ƒê√£ l∆∞u b·ªô s∆∞u t·∫≠p v√†o danh s√°ch h·ªçc c·ªßa b·∫°n');
    } catch (error) {
        console.error('L·ªói khi l∆∞u b·ªô s∆∞u t·∫≠p:', error);
        showToast('error', 'L·ªói', error.message || 'C√≥ l·ªói x·∫£y ra khi l∆∞u b·ªô s∆∞u t·∫≠p');
    }
}

// Quay l·∫°i danh s√°ch b·ªô s∆∞u t·∫≠p
function backToCollections() {
    if (topicGrid) {
        topicGrid.style.display = 'grid';
    }
    if (flashcardSection) {
        flashcardSection.style.display = 'none';
    }
    currentCollection = null;
    currentWordIndex = 0;
    learnedWords.clear();
}

// Hi·ªÉn th·ªã modal ch·ªçn b·ªô s∆∞u t·∫≠p
async function showCollectionModal() {
    try {
        // L·∫•y danh s√°ch b·ªô s∆∞u t·∫≠p c√° nh√¢n
        const collections = await window.collectionsAPI.getUserCollections();
        console.log('Danh s√°ch b·ªô s∆∞u t·∫≠p:', collections);

        // X√≥a danh s√°ch c≈©
        collectionList.innerHTML = '';

        if (!collections || collections.length === 0) {
            collectionList.innerHTML = '<div class="collection-item">B·∫°n ch∆∞a c√≥ b·ªô s∆∞u t·∫≠p n√†o</div>';
            return;
        }

        // Th√™m c√°c b·ªô s∆∞u t·∫≠p v√†o danh s√°ch
        collections.forEach(collection => {
            const item = document.createElement('div');
            item.className = 'collection-item';
            item.innerHTML = `
                <div class="collection-info">
                    <div class="collection-name">${collection.name}</div>
                    <div class="word-count">${collection.wordCount || 0} t·ª´</div>
                </div>
                <button class="save-btn" onclick="event.stopPropagation(); saveWordToCollection(${collection.collectionId})">
                    <i class="fas fa-plus"></i>
                </button>
            `;
            collectionList.appendChild(item);
        });

        // Hi·ªÉn th·ªã modal
        collectionModal.classList.add('active');
    } catch (error) {
        console.error('L·ªói khi l·∫•y danh s√°ch b·ªô s∆∞u t·∫≠p:', error);
        showToast('error', 'L·ªói', 'C√≥ l·ªói x·∫£y ra khi t·∫£i danh s√°ch b·ªô s∆∞u t·∫≠p');
    }
}

// ƒê√≥ng modal
function closeCollectionModal() {
    collectionModal.classList.remove('active');
}

// L∆∞u t·ª´ v√†o b·ªô s∆∞u t·∫≠p
async function saveWordToCollection(collectionId) {
    try {
        if (!currentWord) {
            throw new Error('Kh√¥ng t√¨m th·∫•y t·ª´ hi·ªán t·∫°i');
        }

        console.log('L∆∞u t·ª´:', currentWord.wordId, 'v√†o b·ªô s∆∞u t·∫≠p:', collectionId);
        await window.collectionsAPI.addWordToCollection(collectionId, currentWord.wordId);
        showToast('success', 'Th√†nh c√¥ng!', 'ƒê√£ l∆∞u t·ª´ v√†o b·ªô s∆∞u t·∫≠p');
        closeCollectionModal();
    } catch (error) {
        console.error('L·ªói khi l∆∞u t·ª´:', error);
        showToast('error', 'L·ªói', error.message || 'C√≥ l·ªói x·∫£y ra khi l∆∞u t·ª´ v√†o b·ªô s∆∞u t·∫≠p');
    }
}

// T·∫°o b·ªô s∆∞u t·∫≠p m·ªõi
async function createNewCollection() {
    try {
        const collectionName = prompt('Nh·∫≠p t√™n b·ªô s∆∞u t·∫≠p m·ªõi:');
        if (!collectionName) return;

        const collectionId = await window.collectionsAPI.createCollection(collectionName);
        if (collectionId) {
            // T·∫£i l·∫°i danh s√°ch b·ªô s∆∞u t·∫≠p
            await showCollectionModal();
            
            // T·ª± ƒë·ªông l∆∞u t·ª´ v√†o b·ªô s∆∞u t·∫≠p m·ªõi
            await saveWordToCollection(collectionId);
            
            showToast('success', 'Th√†nh c√¥ng!', 'ƒê√£ t·∫°o b·ªô s∆∞u t·∫≠p m·ªõi v√† l∆∞u t·ª´ th√†nh c√¥ng!');
        }
    } catch (error) {
        console.error('L·ªói khi t·∫°o b·ªô s∆∞u t·∫≠p:', error);
        showToast('error', 'L·ªói', 'C√≥ l·ªói x·∫£y ra khi t·∫°o b·ªô s∆∞u t·∫≠p m·ªõi');
    }
}

// Kh·ªüi t·∫°o khi DOM ƒë√£ load
document.addEventListener('DOMContentLoaded', init);
